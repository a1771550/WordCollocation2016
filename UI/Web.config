<?xml version="1.0" encoding="utf-8"?>
<!--
  For more information on how to configure your ASP.NET application, please visit
  http://go.microsoft.com/fwlink/?LinkId=301880
  -->
<configuration>
	<configSections>
		<section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler, log4net" />

		<section name="entityFramework" type="System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false" />
		<sectionGroup name="dotNetOpenAuth" type="DotNetOpenAuth.Configuration.DotNetOpenAuthSection, DotNetOpenAuth.Core">
			<section name="messaging" type="DotNetOpenAuth.Configuration.MessagingElement, DotNetOpenAuth.Core" requirePermission="false" allowLocation="true" />
			<section name="reporting" type="DotNetOpenAuth.Configuration.ReportingElement, DotNetOpenAuth.Core" requirePermission="false" allowLocation="true" />
			<section name="oauth" type="DotNetOpenAuth.Configuration.OAuthElement, DotNetOpenAuth.OAuth" requirePermission="false" allowLocation="true" />
			<section name="openid" type="DotNetOpenAuth.Configuration.OpenIdElement, DotNetOpenAuth.OpenId" requirePermission="false" allowLocation="true" />
		</sectionGroup>
		<sectionGroup name="elmah">
			<section name="security" requirePermission="false" type="Elmah.SecuritySectionHandler, Elmah" />
			<section name="errorLog" requirePermission="false" type="Elmah.ErrorLogSectionHandler, Elmah" />
			<section name="errorMail" requirePermission="false" type="Elmah.ErrorMailSectionHandler, Elmah" />
			<section name="errorFilter" requirePermission="false" type="Elmah.ErrorFilterSectionHandler, Elmah" />
		</sectionGroup>
	</configSections>
	<log4net debug="true">
		<appender name="RollingLogFileAppender" type="log4net.Appender.RollingFileAppender">
			<!--<file type="log4net.Util.PatternString" value="${TMP}\SRG\Logs\Log_%env{USERNAME}_%date{yyyyMMdd}.log" />-->
			<file type="log4net.Util.PatternString" value="Logs\Log_%env{USERNAME}_%date{yyyyMMdd}.log" />
			<appendToFile value="true" />
			<rollingStyle value="Size" />
			<maxSizeRollBackups value="5" />
			<maximumFileSize value="10MB" />
			<staticLogFileName value="true" />
			<layout type="log4net.Layout.PatternLayout">
				<header type="log4net.Util.PatternString" value="[Log Starts]%newline" />
				<footer type="log4net.Util.PatternString" value="[Log Ends]%newline%newline" />
				<conversionPattern value="%-5level : %date %5rms %-22.22c{1} %-18.18M - %message%exception%newline" />
			</layout>
		</appender>

		<appender name="JSConsoleAppender" type="log4net.Appender.JSConsoleAppender">
			<layout type="log4net.Layout.PatternLayout">
				<!--<span class="code-comment">Note JSConsoleAppender cannot have %newline
				</span>-->
				<header type="log4net.Util.PatternString" value="[Log Starts]%newline" />
				<footer type="log4net.Util.PatternString" value="[Log Ends]%newline%newline" />
				<conversionPattern value="SERVER: %date %-5level %n %logger:  %message SRC: %location %n %exception%newline" />
			</layout>
		</appender>


		<root>
			<level value="DEBUG" />
			<appender-ref ref="RollingLogFileAppender" />
			<appender-ref ref="JSConsoleAppender" />
		</root>
	</log4net>
	<appSettings file="app.config"></appSettings>
	<connectionStrings>
		<add name="WordCollocationEntities" connectionString="metadata=res://*/WordCollocationModel.csdl|res://*/WordCollocationModel.ssdl|res://*/WordCollocationModel.msl;provider=System.Data.SqlClient;provider connection string=&quot;data source=.\sqlexpress;initial catalog=WordCollocation;integrated security=True;MultipleActiveResultSets=True;App=EntityFramework&quot;" providerName="System.Data.EntityClient" />

		<add name="WordCollocation" connectionString="data source=.\sqlexpress;initial catalog=WordCollocation;integrated security=True;" providerName="System.Data.SqlClient" />

		<!--<add name="WordCollocationEntities" connectionString="metadata=res://*/WordCollocationModel.csdl|res://*/WordCollocationModel.ssdl|res://*/WordCollocationModel.msl;provider=System.Data.SqlClient;provider connection string=&quot;data source=184.173.188.68,780;initial catalog=TongLing_WordCollocation;persist security info=True;user id=TongLing_Admin;password=A1b2c3;MultipleActiveResultSets=True;App=EntityFramework&quot;" providerName="System.Data.EntityClient" />

		<add name="WordCollocation" connectionString="data source=184.173.188.68,780;initial catalog=TongLing_WordCollocation;persist security info=True;user id=TongLing_Admin;password=A1b2c3" providerName="System.Data.SqlClient" />-->
	</connectionStrings>
	<system.web>
		<authentication mode="Forms">
			<forms loginUrl="~/Account/Login" name=".WcAuthentication" timeout="2880" />
			<!-- expires in 48 hours -->
		</authentication>
		<authorization></authorization>
		<membership defaultProvider="SimpleMembershipProvider">
			<providers>
				<clear />
				<add name="SimpleMembershipProvider" type="WebMatrix.WebData.SimpleMembershipProvider, WebMatrix.WebData" />
			</providers>
		</membership>
		<roleManager enabled="true" defaultProvider="SimpleRoleProvider">
			<providers>
				<clear />
				<add name="SimpleRoleProvider" type="WebMatrix.WebData.SimpleRoleProvider, WebMatrix.WebData" />
			</providers>
		</roleManager>
		<sessionState mode="InProc" cookieless="false" timeout="120"></sessionState>
		<compilation debug="true" targetFramework="4.6.1">
			<assemblies>
				<remove assembly="Microsoft.VisualStudio.Web.PageInspector.Loader, Version=1.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
			</assemblies>
		</compilation>
		<httpRuntime targetFramework="4.6.1" />

		<httpHandlers>
			<add verb="POST,GET,HEAD" path="elmah.axd" type="Elmah.ErrorLogPageFactory, Elmah" />
		</httpHandlers>
		<customErrors mode="Off" defaultRedirect="~/Error">
			<error statusCode="404" redirect="~/Error/NotFound" />
			<error statusCode="403" redirect="~/Error/AccessDenied" />
		</customErrors>
		<machineKey validation="SHA1" decryption="AES" validationKey="98FA877DF9E628E7E9F9B6DDEC933BDEBD17A4414A6F13D54B04F33A9A63430D94915DC43F611AE881BBCF937072B8460BE1E014ACD42411ACBF501D2BDAF2EF" decryptionKey="5169E952C3B516B42A2611C8B88378970665A97D9F3F7A21" />

		<pages>
			<namespaces>
				<add namespace="UI.Models" />
				<add namespace="UI.Helpers" />
				<add namespace="BLL" />
				<add namespace="CommonLib" />
				<add namespace="THResources" />
				<!--<add namespace="WebMatrix.Data" />
        <add namespace="WebMatrix.WebData" />-->
			</namespaces>
		</pages>
		<httpModules>
			<add name="ErrorLog" type="Elmah.ErrorLogModule, Elmah" />
			<add name="ErrorMail" type="Elmah.ErrorMailModule, Elmah" />
			<add name="ErrorFilter" type="Elmah.ErrorFilterModule, Elmah" />
		</httpModules>
	</system.web>
	<system.webServer>
		<modules>
			<remove name="FormsAuthentication" />
			<add name="FormsAuthentication" type="System.Web.Security.FormsAuthenticationModule" />
			<!--<remove name="ApplicationInsightsWebTracking" />
			<add name="ApplicationInsightsWebTracking" type="Microsoft.ApplicationInsights.Web.ApplicationInsightsHttpModule, Microsoft.AI.Web" preCondition="managedHandler" />-->
			<add name="ErrorLog" type="Elmah.ErrorLogModule, Elmah" preCondition="managedHandler" />
			<add name="ErrorMail" type="Elmah.ErrorMailModule, Elmah" preCondition="managedHandler" />
			<add name="ErrorFilter" type="Elmah.ErrorFilterModule, Elmah" preCondition="managedHandler" />
		</modules>
		<handlers>
			<add name="ELMAH" verb="POST,GET,HEAD" path="elmah.axd" type="Elmah.ErrorLogPageFactory, Elmah" preCondition="integratedMode" />
		</handlers>

		<validation validateIntegratedModeConfiguration="false" />
	</system.webServer>
	<elmah>
		<!--
        See http://code.google.com/p/elmah/wiki/SecuringErrorLogPages for 
        more information on remote access and securing ELMAH.
    -->
		<security allowRemoteAccess="yes" />
		<errorMail from="admin@wordcollocation.net" to="a1771550@gmail.com" subject="elmah error mail from WordCollocation2016" async="true" />
		<errorLog type="Elmah.XmlFileErrorLog, Elmah" logPath="~/Logs" />

		<errorFilter>
			<test>
				do not log and email any 404 errors
				<equal binding="HttpStatusCode" value="404" type="Int32" />
			</test>
			<test>
				do not log favicon.ico 404's
				<and>
					<equal binding="HttpStatusCode" value="404" type="Int32" />
					<regex binding="Context.Request.ServerVariables['URL']" pattern="/favicon\.ico(\z|\?)" />
				</and>
			</test>
		</errorFilter>
		<!--<security allowRemoteAccess="false" />-->
	</elmah>
	<runtime>
		<assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
			<!--<dependentAssembly>
				<assemblyIdentity name="Microsoft.Owin.Security" publicKeyToken="31bf3856ad364e35" />
				<bindingRedirect oldVersion="0.0.0.0-3.0.1.0" newVersion="3.0.1.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="Microsoft.Owin.Security.OAuth" publicKeyToken="31bf3856ad364e35" />
				<bindingRedirect oldVersion="0.0.0.0-3.0.1.0" newVersion="3.0.1.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="Microsoft.Owin.Security.Cookies" publicKeyToken="31bf3856ad364e35" />
				<bindingRedirect oldVersion="0.0.0.0-3.0.1.0" newVersion="3.0.1.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="Microsoft.Owin" publicKeyToken="31bf3856ad364e35" />
				<bindingRedirect oldVersion="0.0.0.0-3.0.1.0" newVersion="3.0.1.0" />
			</dependentAssembly>-->
			<dependentAssembly>
				<assemblyIdentity name="Newtonsoft.Json" culture="neutral" publicKeyToken="30ad4fe6b2a6aeed" />
				<bindingRedirect oldVersion="0.0.0.0-6.0.0.0" newVersion="6.0.0.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Web.Optimization" publicKeyToken="31bf3856ad364e35" />
				<bindingRedirect oldVersion="1.0.0.0-1.1.0.0" newVersion="1.1.0.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="WebGrease" publicKeyToken="31bf3856ad364e35" />
				<bindingRedirect oldVersion="0.0.0.0-1.5.2.14234" newVersion="1.5.2.14234" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Web.Helpers" publicKeyToken="31bf3856ad364e35" />
				<bindingRedirect oldVersion="0.0.0.0-3.0.0.0" newVersion="3.0.0.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Web.Mvc" publicKeyToken="31bf3856ad364e35" />
				<bindingRedirect oldVersion="0.0.0.0-5.2.3.0" newVersion="5.2.3.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Web.WebPages" publicKeyToken="31bf3856ad364e35" />
				<bindingRedirect oldVersion="0.0.0.0-3.0.0.0" newVersion="3.0.0.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Web.WebPages.Razor" publicKeyToken="31bf3856ad364e35" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-3.0.0.0" newVersion="3.0.0.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="WebMatrix.Data" publicKeyToken="31bf3856ad364e35" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-2.0.0.0" newVersion="2.0.0.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="log4net" publicKeyToken="669e0ddf0bb1aa2a" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-1.2.15.0" newVersion="1.2.15.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="DotNetOpenAuth.AspNet" publicKeyToken="2780ccd10d57b246" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-4.1.0.0" newVersion="4.1.0.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="DotNetOpenAuth.Core" publicKeyToken="2780ccd10d57b246" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-4.1.0.0" newVersion="4.1.0.0" />
			</dependentAssembly>
		</assemblyBinding>
		<!-- This prevents the Windows Event Log from frequently logging that HMAC1 is being used (when the other party needs it). -->
		<legacyHMACWarning enabled="0" />
		<!-- When targeting ASP.NET MVC 3, this assemblyBinding makes MVC 1 and 2 references relink
		     to MVC 3 so libraries such as DotNetOpenAuth that compile against MVC 1 will work with it.
		<assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
			<dependentAssembly>
				<assemblyIdentity name="System.Web.Mvc" publicKeyToken="31bf3856ad364e35" />
				<bindingRedirect oldVersion="1.0.0.0-3.0.0.0" newVersion="3.0.0.0" />
			</dependentAssembly>
		</assemblyBinding>
		 -->
	</runtime>
	<entityFramework>
		<defaultConnectionFactory type="System.Data.Entity.Infrastructure.LocalDbConnectionFactory, EntityFramework">
			<parameters>
				<parameter value="mssqllocaldb" />
			</parameters>
		</defaultConnectionFactory>
		<providers>
			<provider invariantName="System.Data.SqlClient" type="System.Data.Entity.SqlServer.SqlProviderServices, EntityFramework.SqlServer" />
		</providers>
	</entityFramework>
	<system.codedom>
		<compilers>
			<compiler language="c#;cs;csharp" extension=".cs" type="Microsoft.CodeDom.Providers.DotNetCompilerPlatform.CSharpCodeProvider, Microsoft.CodeDom.Providers.DotNetCompilerPlatform, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" warningLevel="4" compilerOptions="/langversion:6 /nowarn:1659;1699;1701" />
			<compiler language="vb;vbs;visualbasic;vbscript" extension=".vb" type="Microsoft.CodeDom.Providers.DotNetCompilerPlatform.VBCodeProvider, Microsoft.CodeDom.Providers.DotNetCompilerPlatform, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" warningLevel="4" compilerOptions="/langversion:14 /nowarn:41008 /define:_MYTYPE=\&quot;Web\&quot; /optionInfer+" />
		</compilers>
	</system.codedom>

	<!--<system.net>
		<mailSettings>
			<smtp>
				<network host="mail.translationhall.com" defaultCredentials="false" enableSsl="false" port="8889" userName="admin@translationhall.com" password="F3No200PakLongTsuen" />
			</smtp>
		</mailSettings>
		<defaultProxy enabled="true" />
		<settings>
			-->
	<!-- This setting causes .NET to check certificate revocation lists (CRL) 
			     before trusting HTTPS certificates.  But this setting tends to not 
			     be allowed in shared hosting environments. -->
	<!--
			-->
	<!--<servicePointManager checkCertificateRevocationList="true"/>-->
	<!--
		</settings>
	</system.net>-->
	<uri>
		<!-- The uri section is necessary to turn on .NET 3.5 support for IDN (international domain names),
		     which is necessary for OpenID urls with unicode characters in the domain/host name.
		     It is also required to put the Uri class into RFC 3986 escaping mode, which OpenID and OAuth require. -->
		<!-- The uri section is necessary to turn on .NET 3.5 support for IDN (international domain names),
		     which is necessary for OpenID urls with unicode characters in the domain/host name.
		     It is also required to put the Uri class into RFC 3986 escaping mode, which OpenID and OAuth require. -->
		<idn enabled="All" />
		<iriParsing enabled="true" />
	</uri>
	<system.net>
		<mailSettings>
			<smtp deliveryMethod="SpecifiedPickupDirectory" from="test@test.com">
				<network host="localhost" />
				<specifiedPickupDirectory pickupDirectoryLocation="C:\email" />
			</smtp>
		</mailSettings>
		<defaultProxy enabled="true" />
		<settings>
			<!-- This setting causes .NET to check certificate revocation lists (CRL) 
			     before trusting HTTPS certificates.  But this setting tends to not 
			     be allowed in shared hosting environments. -->
			<!--<servicePointManager checkCertificateRevocationList="true"/>-->
		</settings>
	</system.net>
	<!--<log4net>
		<root>
			<level value="ALL" />
			<appender-ref ref="aiAppender" />
		</root>
		<appender name="aiAppender" type="Microsoft.ApplicationInsights.Log4NetAppender.ApplicationInsightsAppender, Microsoft.ApplicationInsights.Log4NetAppender">
			<layout type="log4net.Layout.PatternLayout">
				<conversionPattern value="%message%newline" />
			</layout>
		</appender>
	</log4net>-->
	<dotNetOpenAuth>
		<messaging>
			<untrustedWebRequest>
				<whitelistHosts>
					<!-- Uncomment to enable communication with localhost (should generally not activate in production!) -->
					<!--<add name="localhost" />-->
				</whitelistHosts>
			</untrustedWebRequest>
		</messaging>
		<!-- Allow DotNetOpenAuth to publish usage statistics to library authors to improve the library. -->
		<reporting enabled="true" />
		<!-- This is an optional configuration section where aspects of dotnetopenauth can be customized. -->
		<!-- For a complete set of configuration options see http://www.dotnetopenauth.net/developers/code-snippets/configuration-options/ -->
		<openid>
			<relyingParty>
				<security requireSsl="false">
					<!-- Uncomment the trustedProviders tag if your relying party should only accept positive assertions from a closed set of OpenID Providers. -->
					<!--<trustedProviders rejectAssertionsFromUntrustedProviders="true">
						<add endpoint="https://www.google.com/accounts/o8/ud" />
					</trustedProviders>-->
				</security>
				<behaviors>
					<!-- The following OPTIONAL behavior allows RPs to use SREG only, but be compatible
					     with OPs that use Attribute Exchange (in various formats). -->
					<add type="DotNetOpenAuth.OpenId.RelyingParty.Behaviors.AXFetchAsSregTransform, DotNetOpenAuth.OpenId.RelyingParty" />
				</behaviors>
			</relyingParty>
		</openid>
	</dotNetOpenAuth>
</configuration>